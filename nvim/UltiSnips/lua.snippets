snippet try "define try"
function try(f, catch_f)
	local status, exception = pcall(f)
	if not status then
		catch_f(exception)
	end
end

try(
	function()
		-- Try block
	end,
	function(e)
		-- Except block. E.g.:
		--  Use e for conditional catch
		--  Re-raise with error(e)
	end)
endsnippet

snippet func "define function"
function ${1:name}(${2:arg})
	${3:body}
end
endsnippet

snippet lfunc "define local function"
local function ${1:name}(${2:arg})
	${3:body}
end
endsnippet

snippet if "define if statement"
if ${1:condition} then
	${3:body}
end
endsnippet

snippet ifel "define if else statement"
if ${1:condition} then
	${2:consequent}
else
	${3:alternate}
end
endsnippet

snippet for "define for .. in pairs(..)"
for ${1:k}, ${2:v} in pairs(${3:table}) do
	${4:body}
end
endsnippet

snippet fori "define for .. in pairs(..)"
for ${1:k}, ${2:v} in ipairs(${3:table}) do
	${4:body}
end
endsnippet
