vim.cmd('hi clear')
vim.opt.background = 'dark'
vim.g.colors_name = 'lake_contrast'

---@class LakeColors
local _colors_default = {
    c00 = '#2b303b',
    c01 = '#343d46',
    c02 = '#4f5b66',
    c03 = '#65737e',
    c04 = '#a7adba',
    c05 = '#c0c5ce',
    c06 = '#dfe1e8',
    c07 = '#eff1f5',
    c08 = '#bf616a',
    c09 = '#d08770',
    c0A = '#ebcb8b',
    c0B = '#a3be8c',
    c0C = '#96b5b4',
    c0D = '#8fa1b3',
    c0E = '#b48ead',
    c0F = '#ab7967',
}

---@type LakeColors
local colors = {
    c00 = '#272b35',
    c01 = '#2f373f',
    c02 = '#47525c',
    c03 = '#6f7f8b',
    c04 = '#a7adba',
    c05 = '#d3d9e3',
    c06 = '#f5f7ff',
    c07 = '#ffffff',
    c08 = '#d26a74',
    c09 = '#e5957b',
    c0A = '#ffdf99',
    c0B = '#b3d19a',
    c0C = '#a5c7c6',
    c0D = '#9db1c5',
    c0E = '#c69cbe',
    c0F = '#bc8571',
}

---@type table<string, vim.api.keyset.highlight>
local groups = {
    Normal = { fg = colors.c05, bg = colors.c00 },
    NormalNC = { link = 'ColorColumn' },
    NormalFloat = { link = 'Normal' },
    Bold = { bold = true },
    Debug = { fg = colors.c08 },
    Directory = { fg = colors.c0D },
    Error = { fg = colors.c00, bg = colors.c08 },
    ErrorMsg = { fg = colors.c08, bg = colors.c00 },
    Exception = { fg = colors.c08 },
    FoldColumn = { fg = colors.c0C, bg = colors.c01 },
    Folded = { fg = colors.c03, bg = colors.c01 },
    IncSearch = { fg = colors.c01, bg = colors.c09 },
    Italic = { italic = true },
    Macro = { fg = colors.c05 },
    MatchParen = { bg = colors.c03 },
    ModeMsg = { fg = colors.c0B },
    MoreMsg = { fg = colors.c0B },
    Question = { fg = colors.c0D },
    Search = { fg = colors.c01, bg = colors.c0A },
    Substitute = { fg = colors.c01, bg = colors.c0A },
    SpecialKey = { fg = colors.c03 },
    TooLong = { fg = colors.c08 },
    Underlined = { fg = colors.c08 },
    Visual = { bg = colors.c02 },
    VisualNOS = { fg = colors.c08 },
    WarningMsg = { fg = colors.c08 },
    WildMenu = { fg = colors.c08, bg = colors.c0A },
    WinSeparator = { fg = colors.c02 },
    Title = { fg = colors.c0D },
    Conceal = { fg = colors.c0D, bg = colors.c00 },
    Cursor = { fg = colors.c00, bg = colors.c05 },
    NonText = { fg = colors.c03 },
    Whitespace = { fg = colors.c02 },
    LineNr = { fg = colors.c03, bg = colors.c01 },
    SignColumn = { fg = colors.c03, bg = colors.c01 },
    StatusLine = { fg = colors.c04, bg = colors.c01 },
    StatusLineFaded = { fg = colors.c03, bg = colors.c01 },
    StatusLineNC = { fg = colors.c03, bg = colors.c01 },
    VertSplit = { fg = colors.c02, bg = colors.c02 },
    ColorColumn = { bg = colors.c01 },
    CursorColumn = { bg = colors.c01 },
    CursorLine = { bg = colors.c01 },
    CursorLineNr = { fg = colors.c04, bg = colors.c01 },
    QuickFixLine = { bg = colors.c01 },
    PMenu = { fg = colors.c05, bg = colors.c01 },
    PMenuSel = { fg = colors.c01, bg = colors.c05 },
    TabLine = { fg = colors.c03, bg = colors.c01 },
    TabLineFill = { fg = colors.c03, bg = colors.c01 },
    TabLineSel = { fg = colors.c0B, bg = colors.c01 },

    DiagnosticInfo = { fg = colors.c0C },
    DiagnosticHint = { fg = colors.c0C },
    DiagnosticWarn = { fg = colors.c0A },
    DiagnosticError = { fg = colors.c08 },
    DiagnosticOk = { fg = colors.c0B },
    DiagnosticDeprecated = { strikethrough = true },

    Added = { fg = colors.c0B },
    Removed = { fg = colors.c08 },
    Changed = { fg = colors.c0D },

    DiffAdd = { fg = colors.c0B, bg = colors.c01 },
    DiffChange = { fg = colors.c03, bg = colors.c01 },
    DiffDelete = { fg = colors.c08, bg = colors.c01 },
    DiffText = { fg = colors.c0D, bg = colors.c01 },
    DiffAdded = { fg = colors.c0B, bg = colors.c00 },
    DiffFile = { fg = colors.c08, bg = colors.c00 },
    DiffNewFile = { fg = colors.c0B, bg = colors.c00 },
    DiffLine = { fg = colors.c0D, bg = colors.c00 },
    DiffRemoved = { fg = colors.c08, bg = colors.c00 },

    MiniDiffSignAdd = { fg = colors.c0B, bg = colors.c01 },
    MiniDiffSignChange = { fg = colors.c0D, bg = colors.c01 },
    MiniDiffSignDelete = { fg = colors.c08, bg = colors.c01 },

    Boolean = { fg = colors.c09 },
    Character = { fg = colors.c05 },
    Comment = { fg = colors.c03 },
    Conditional = { fg = colors.c0E },
    Constant = { fg = colors.c05 },
    Define = { fg = colors.c0E },
    Delimiter = { fg = colors.c0F },
    Float = { fg = colors.c09 },
    Function = { fg = colors.c0E },
    Identifier = { fg = colors.c05 },
    Include = { fg = colors.c0D },
    Keyword = { fg = colors.c05 },
    Label = { fg = colors.c0A },
    Number = { fg = colors.c09 },
    Operator = { fg = colors.c05 },
    PreProc = { fg = colors.c0A },
    Repeat = { fg = colors.c0A },
    Special = { fg = colors.c0A },
    SpecialChar = { fg = colors.c0F },
    Statement = { fg = colors.c05 },
    StorageClass = { fg = colors.c0A },
    String = { fg = colors.c0B },
    Structure = { fg = colors.c05 },
    Tag = { fg = colors.c0A },
    Todo = { fg = colors.c0A, bg = colors.c01 },
    Type = { fg = colors.c0A },
    Typedef = { fg = colors.c0A },

    -- My custom highlights
    StatusLineModified = { fg = colors.c00, bg = colors.c0B, bold = true },

    -- Plugins
    MiniCursorWord = { link = 'Visual' },
    MiniCursorWordCurrent = { link = 'CursorLine' },

    SnacksPickerDir = { link = 'Directory' },
    SnacksPickerCmd = { link = 'Identifier' },
    SnacksPickerPrompt = { link = 'Identifier' },

    -- AI Suggestions
    AISuggestion = { fg = colors.c03, italic = true },
    CopilotAnnotation = { fg = colors.c03, italic = true },
    CopilotSuggestion = { fg = colors.c03, italic = true },

    -- Treesitter 0.8 or newer
    ['@function'] = { fg = colors.c05 },
    ['@function.builtin'] = { link = 'Special' },
    ['@constant'] = { link = 'Constant' },
    ['@constructor'] = { fg = colors.c05 },
    ['@conditional'] = { link = 'Conditional' },
    ['@operator'] = { fg = colors.c05 },
    ['@parameter'] = { fg = colors.c05 },
    ['@parameter.reference'] = { fg = colors.c05 },
    ['@property'] = { fg = colors.c05 },
    ['@field'] = { fg = colors.c05 },
    ['@punctuation.delimiter'] = { fg = colors.c05 },
    ['@punctuation.delimiter.markdown'] = { link = 'Delimiter' },
    ['@punctuation.bracket'] = { fg = colors.c0D },
    ['@punctuation.special'] = { fg = colors.c05 },
    ['@repeat'] = { link = 'Repeat' },
    ['@string.special.url'] = { link = 'String' },
    ['@type'] = { fg = colors.c05 },
    ['@text.todo'] = { link = 'Normal' },
    ['@type.builtin'] = { fg = colors.c05 },
    ['@variable'] = { fg = colors.c05 },
    ['@variable.builtin'] = { fg = colors.c0A },
    ['@float'] = { fg = colors.c09 },
    ['@keyword'] = { fg = colors.c0A },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.conditional.tsx'] = { link = 'Conditional' },
    ['@keyword.function'] = { fg = colors.c0E },
    ['@keyword.return'] = { fg = colors.c08, bold = true },
    ['@markup.strikethrough'] = { link = 'Conceal' },
    ['@method'] = { fg = colors.c05 },
    ['@namespace'] = { fg = colors.c05 },
    ['@exception'] = { fg = colors.c0C },
    ['@include'] = { fg = colors.c0E },
    ['@text.title'] = { link = 'Title' },
    ['@text.literal'] = { link = 'String' },
    ['@text.strong'] = { link = 'Bold' },
    ['@text.strike'] = { link = 'Comment' },
    ['@text.quote'] = { fg = colors.c04 },
    ['@text.emphasis'] = { link = 'Italic' },
    ['@text.uri'] = { link = 'String' },
    ['@text.reference'] = { fg = colors.c08 },
    ['@tag'] = { fg = colors.c0D },
    ['@tag.builtin'] = { link = '@tag' },
    ['@tag.custom'] = { fg = colors.c0D },
    ['@tag.delimiter'] = { fg = colors.c0D },
    ['@tag.attribute'] = { fg = colors.c0A },
    ['@statement'] = { fg = colors.c0A },
    ['@error'] = { fg = colors.c08 },
    ['@label'] = { link = 'Normal' },
    ['@markup.heading'] = { link = 'Title' },
    ['@markup.italic'] = { link = 'Italic' },
    ['@markup.link'] = { link = 'Normal' },
    ['@markup.link.label'] = { fg = colors.c08 },
    ['@markup.link.label.tsx'] = { fg = colors.c05 },
    ['@markup.link.url'] = { link = 'String' },
    ['@markup.list'] = { fg = colors.c05 },
    ['@markup.quote'] = { link = '@text.quote' },
    ['@markup.raw'] = { link = 'String' },
    ['@markup.raw.block'] = { link = 'Normal' },
    ['@markup.raw.block.markdown'] = { link = 'String' },
    ['@markup.raw.delimeter'] = { link = 'Normal' },
    ['@markup.strong'] = { link = 'Bold' },
}

local set_hl = vim.api.nvim_set_hl

for group, opts in pairs(groups) do
    set_hl(0, group, opts)
end
