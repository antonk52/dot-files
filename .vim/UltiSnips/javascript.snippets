snippet jesttest
/* @flow */

import React from 'react';
import {shallow} from 'enzyme';

import {Base} from '../';

describe('$1', () => {
    it('$2', () => {
        const wrapper = shallow(<Base $3/>);

        expect(wrapper).toMatchSnapshot();
    });

    it('mapStateToProps', () => {
        const result = mapStateToProps({
            $4
        });

        const expected = {
            $5
        };

        expect(result).toEqual(expected);
    });
});
endsnippet

snippet jestit
it('', () => {
    const result = func();
    const expected = {};

    expect(result).toEqual(expected);
})
endsnippet

snippet flow
/* @flow */

$1
endsnippet

snippet us
'use strict'

$1
endsnippet

#
# react + flowtype + redux file template
# - names component same as the directory the file is into
snippet reactfile "react flow redux template"
// @flow

import React from 'react';
import {connect} from 'react-redux';
import {type HOC} from 'recompose';

type Props = {|
    className?: string,
|};

const ${1:`!v expand('%:t:r') == 'index' ? expand('%:p:h:t') : expand('%:t:r')`} = ({}: Props) => (
    ${2:<div />}
);

export {$1 as Base};

export const mapStateToProps = ({
    $3
}) => ({
    $4
});

const enhance: HOC<*, {||}> = connect(mapStateToProps, {});

export default enhance($1);
endsnippet

snippet defSleep
const sleep = async (ms) => new Promise(r => setTimeout(r, ms));
endsnippet

snippet func "function declaration"
function ${1:name}(${2:arg}) {
    return ${3:arg};
}
$0
endsnippet

snippet /* "documentation block"
/**
 * $1
 */
$0
endsnippet

snippet todo "do this later"
/**
 * TODO: $1
 */
endsnippet
