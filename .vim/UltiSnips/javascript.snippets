snippet flow
// @flow

$1
endsnippet

snippet us
'use strict'

$1
endsnippet

#
# react + flowtype + redux file template
# - names component same as the directory the file is into
snippet rrfile "react flow redux template"
// @flow

import React from 'react';
import {connect} from 'react-redux';
import type {HOC} from 'recompose';

type OuterProps = {|
	className?: string,
|};

type InnerProps = {|
	...OuterProps,
	stuff: string,
|};
const ${1:`!v expand('%:t:r') == 'index' ? expand('%:p:h:t') : expand('%:t:r')`} = ({${2:propName}}: InnerProps) => (
	${3:<div />}
);

export {$1 as Base};

export const mapStateToProps = ({
	$4
}) => ({
	$5
});

const enhance: HOC<InnerProps, OuterProps> = connect(mapStateToProps, {});

export default enhance($1);
endsnippet

snippet rfile "react flow template"
// @flow

import React from 'react';

import css from './style.css';

type Props = {|
	className?: string,
|};

const ${1:`!v expand('%:t:r') == 'index' ? expand('%:p:h:t') : expand('%:t:r')`} = ({${2:propName}}: Props) => (
	${3:<div />}
);

export default $1;
endsnippet

snippet defSleep
const sleep = async (ms) => new Promise(r => setTimeout(r, ms));
endsnippet

snippet func "function declaration"
function ${1:name}(${2:arg}) {
    return ${3:arg};
}
$0
endsnippet

snippet /* "documentation block"
/**
 * $1
 */
$0
endsnippet

snippet todo "do this later"
/**
 * TODO: $1
 */
endsnippet

snippet switch
switch (${0:condition}) {
    case ${1:when}:
        ${2:expr}
    case ${3:cond}:
        ${4:expr}
    default:
        ${5:expr}
}
endsnippet

snippet con "console.log"
console.log(${1:logme})
endsnippet

snippet iif "ignore the whole file"
/* istanbul ignore file */
endsnippet

snippet iin "ignore the next thing"
/* istanbul ignore next */
endsnippet

snippet ednl "eslint-disable-next-line comment"
eslint-disable-next-line ${0:rule-name}
endsnippet

snippet fi "$FlowIgnore"
$FlowIgnore<'${0:why do you ignore?}'>
endsnippet

snippet ffm "$FlowFixMe"
$FlowFixMe<'${0:what is broken?}'>
endsnippet

snippet ee "$ExpectError"
$ExpectError<'${0:why is it expected?}'>
endsnippet

snippet logme "logger generator"
const log = txt => console.log('\n\n${txt}\n\n');
endsnippet

snippet import "import statement"
import ${2:thing} from '${1:package}';
endsnippet

snippet useState "React.useState"
const [${1:state}, set${1/\w+\s*/\u$0/g}] = useState<${2:Type}>(${3:defaultValue});
endsnippet

snippet useEffect "React.useEffect"
useEffect(() => {
	${1:logic}
}, [${2:leave_empty_for_componentDidMount}]);
endsnippet

snippet useCallback "React.useCallback"
useCallback(() => {
	${1:logic}
}, [${2:dependencies}]);
endsnippet
