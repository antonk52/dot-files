#!/bin/bash

# vim goodness
alias :sp='test -n "$TMUX" && tmux split-window'
alias :vs='test -n "$TMUX" && tmux split-window -h'
alias :q='exit'

# ls
if command -v eza &> /dev/null;
then
    alias ls='eza --color=never'
fi
alias ll='ls -alF'

alias cl='clear'

# dir manipulation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias compare='diff -rq'

# git
alias g='git'
alias it='git' # fat fitngers
alias ga='git add'
alias gap='git add -p'
alias gs='git status -s'
alias gc='git commit -m'

# tmux aliases
alias tst='tmux start-server'
alias tks='tmux kill-server'
alias tl='tmux list-sessions'
alias ta='tmux attach -t'

# start a named session by providing a name
# or a blank session by calling `tm`
function tm()
{
  if [ $# -eq 1 ]
  then
    tmux new-session -s "$@"
  else
    tmux
  fi
}

# other aliases
alias e='exit'
alias o='open .'
alias ax='chmod a+x'
alias h='history | fzf +s --tac --tiebreak=index | sed "s/ *[0-9]* *//"'
alias q='quit'
alias chux='chmod u+x'

export NOTES_PATH="$HOME"/Documents/notes
function notes()
{
  # If there is no "notes" window, rename the current one
  if [[ -n "$TMUX" ]]; then
    has_notes_window=$(tmux list-windows | grep notes)
    [ "$has_notes_window" ] || tmux rename-window "notes"
  fi

  eval PWD=$NOTES_PATH $EDITOR -c "NotesStart"
}

alias colorlight="~/dot-files/scripts/base16-github.sh"
alias colordark="~/dot-files/scripts/base16-tomorrow-night.sh"
alias nvi="~/Downloads/nvim-macos-arm64/bin/nvim"

function cdf()
{
    cd "$(fd --type d --exclude node_modules | fzf)"
}
function cdF()
{
    cd "$(fd --type d --no-ignore --exclude node_modules | fzf)"
}

function gob()
{
    branch_name="$(git branch | fzf-tmux | sed 's/^\(\s\)*\*//g' | sed 's/^ *//g')"

    git go $branch_name
}

function repo_url()
{
    # get origin
    # - git@github.foobar.com:user/repo.git
    # - https://github.foobar.com:user/repo
    #
    # 1. replace `:` between host and user
    # 2. remove `git@` in the beginning if present
    # 3. remove `.git` in the end if present
    # 4. remove `:` in the protocol if it was affected by step 1
    git config remote.origin.url \
        | sed 's/:/\//' \
        | sed -re 's/^git@/https:\/\//g' \
        | sed 's/\.git$//' \
        | sed 's/^https\//https:/'
}

# brew_upgrade_outdated
function bu() {
    # List outdated packages and use fzf to allow the user to select multiple packages
    local packages_to_upgrade=$(brew outdated --quiet | fzf --multi --border --prompt "Select packages to upgrade: " | awk '{printf "%s ", $1}')
    # Check if the user selected any packages
    if [[ -n "$packages_to_upgrade" ]]; then
        # Upgrade the selected packages in one command
        echo "Upgrading selected packages: $packages_to_upgrade"
        eval brew upgrade --quiet "$packages_to_upgrade"
    else
        echo "No packages selected for upgrade."
    fi
}
alias bua="brew update --all && brew upgrade && brew cleanup --quiet"
function docker_stop_all() {
    docker stop $(docker ps -q)
}

function get_nvim_nightly() {
    local old_pwd=$(pwd)
    cd ~/Downloads
    # clean up if it exists already
    rm -rf ./nvim-macos-arm64.tar.gz ./nvim-macos-arm64 ./nvim-nightly
    # download tar with build
    wget --quiet https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz && echo "- Downloaded"
    # to avoid "unknown developer" warning
    xattr -c ./nvim-macos-arm64.tar.gz > /dev/null 2>&1 && echo "- Removed attributes"
    # extract
    tar xzvf nvim-macos-arm64.tar.gz > /dev/null 2>&1 && echo "- Extracted"
    mv nvim-macos-arm64 nvim-nightly
    ~/Downloads/nvim-nightly/bin/nvim --version | grep 'NVIM v'
    # print archive date
    echo "Build from: $(ls -l ~/Downloads/nvim-macos-arm64.tar.gz | awk '{print $6, $7, $8}')"
    cd $old_pwd
}

function get_nvim() {
    local old_pwd=$(pwd)
    cd ~/Downloads
    # clean up if it exists already
    rm -rf ./nvim-macos-arm64.tar.gz ./nvim-macos-arm64 ./nvim
    # download tar with build
    wget --quiet https://github.com/neovim/neovim/releases/download/v0.10.0/nvim-macos-arm64.tar.gz && echo "- Downloaded"
    # to avoid "unknown developer" warning
    xattr -c ./nvim-macos-arm64.tar.gz > /dev/null 2>&1 && echo "- Removed attributes"
    # extract
    tar xzvf nvim-macos-arm64.tar.gz > /dev/null 2>&1 && echo "- Extracted"
    mv nvim-macos-arm64 nvim
    ~/Downloads/nvim/bin/nvim --version | grep 'NVIM v'
    # print archive date
    echo "Build from: $(ls -l ~/Downloads/nvim-macos-arm64.tar.gz | awk '{print $6, $7, $8}')"
    cd $old_pwd
}
